#+TITLE:  CoffeeScript Console Code
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   [2013-07-04 Thu]
#+TAGS:   coffeescript

* Overview

  This code contains jQuery instructions for turning blocks of code
  on a web page into an editable text area and executing that code in
  a context of other functions. The goal being a way to easily try
  out programming concepts and wrap that up in a game format.

  This allows me to write JavaScript or CoffeeScript lessons in an
  org-mode file, and publish it as an HTML file.

* Snippet for Notebooks

  Each exported file needs to have the following references to
  CSS, JavaScript, CoffeeScript and other support files (including a
  reference to this code):

#+BEGIN_SRC html :tangle no
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js" type="text/javascript"></script>
  <script src="http://jashkenas.github.com/coffee-script/extras/coffee-script.js" type="text/javascript" charset="utf-8"></script>
  <script src="script/console.coffee" type="text/coffeescript"></script>
  <link href="styles/console.css" type="text/css" rel="Stylesheet" />
#+END_SRC

  The easiest way is to have it as part of the org-mode publishing process.

* Cell Evaluation

  When the user enters some code, we need to evaluate it in the
  browser, and render the results that fit the game.

** Code Wrapping for Logging

   Each code entry that the user types is sandwiched between a
   =prefix= and =postfix= codes.

#+BEGIN_SRC coffee
  prefixCode = '''
  _console_log = []
  _debug_log = []
  
  console = {
    log: (args...) ->
      _console_log.push( args.join(" ") )
    debug: (args...) ->
      _debug_log.push( args.join(" ") )
  }
  
  _execution = ->
  '''
  
  postfixCode = '''
        dock()    # Don't like having veep-rv-1 specific code here.

  _results = _execution()
  {
     results: _results[0]
     log: _console_log,
     debug: _results[1]
     debug2: _results[2]
     success: _results[3]
  }'''
#+END_SRC

** Enlarge Text Area

    While the textarea in Safari and some browsers can be
    automatically resized, we can't count on it, so clicking a button
    will call this function to enlarge the text area.

#+BEGIN_SRC coffee
  enlargeArea = ->
    parent = $(this).parents(".code")
    height = $("textarea", parent).height() + 20   # Assuming font is 17px
    $("textarea", parent).css("height", height + "px")
#+END_SRC

** Text Formatting

   When some code is evaluated, we need to take the results (as
   JavaScript objects and arrays) and render it.  We create a
   recursive function, =render= that knows how to render:

   - Objects as Tables
   - Arrays as Lists
   - Simple Types as strings

#+BEGIN_SRC coffee
  render_list = (e) ->
          "<li>" + render(e) + "</li>"
  render_row = (k, v) ->
          "<tr><th>" + render(v).replace(/_/g, " ") + ":</th><td>" + render(k) + "</td></tr>"
  
  render = (o) ->
          # console.log("Rendering:", typeof o, o)
          if _.isArray(o)
                  if o.length == 1
                          "<code>" + o[0] + "</code>"
                  else
                          "<ul>" + _.map(o, render_list).join("") + "</ul>"
          else if _.isObject(o)
                  "<table>" + _.map(o, render_row).join("") + "</table>"
          else
                  "<code>" + o + "</code>"
#+END_SRC

** Results

   Displaying the results is a matter of accepting objects for the
   different tabs and after converting those to strings (using the
   =render= function, inserting it back into the DOM.

#+BEGIN_SRC coffee
  displayResults = (id, tab1 = "", tab2 = "", tab3 = "") ->
          $("#tab-results-" + id).html( render(tab1) )
          $("#tab-logs-" + id).html( render(tab2) )
          $("#tab-debug-" + id).html( render(tab3) )
#+END_SRC

** Simulation

   At first, we'll want to simulate the process of connecting and
   waiting for a rover to finish. To make the game more pleasant, we
   should allow this to be skipped.

#+BEGIN_SRC coffee
  simulation = ->
          parent = $(this).parents(".code")
          id     = parent.attr("id").substring(5)
          messages = [
                  "Connecting to rover base station...",
                  "Downloading instructions to rover...",
                  "Rover acknowledged receiving instructions.",
                  "Waiting for completion of rover mission..."
          ]
          panel = $("#tab-results-" + id)
  
          panel.html("") # Clear it out...
          timer = ->
                  if messages.length == 0
                          evalRun.apply(this)
                  else
                          panel.append("<code>" + messages[0] + "</code><br/>")
  
                          messages = _.rest(messages)
                          nextTime = Math.round( Math.random() * 3000 )
                          if messages.length == 0
                                  nextTime += 3000   # Last message longer.
                          setTimeout(timer, nextTime)
  
          timer()  # Start the timer count-down...                        
#+END_SRC
** Evaluate

    This function will be called by the "Run" button, and it should
    gather up the code in the =textarea=, evaluate it, and put the
    results back into the page.

#+BEGIN_SRC coffee
  evalRun = ->
    parent = $(this).parents(".code")
    id     = parent.attr("id").substring(5)
    height = $("textarea", parent).height()
    code   = $("textarea", parent).val()
  
    # Odd section where we sandwich the player's "program" inside our
    # own code, including creating a canvasid variable for the turtlewax.  
    fullcode = prefixCode +
          code.replace(/^|\n/g, "\n   ") + "\n" + postfixCode
    console.log("Fullcode:", fullcode)
    
    try
      results = CoffeeScript.eval(fullcode)
      displayResults(id, results.results, results.log, results.debug )
    catch e
      console.log "Error", e
      if e.message == "Can't find variable: _"
        e.message = "Replace the underbar characters<br/>before clicking <b>Run</b>."
      displayResults(id, e.message, e )
  
    # console.log("Results:", results)
#+END_SRC

* Create Editable Cells (Template)

  The JS code with jQuery will convert all =<pre>= blocks to editable
  fields with buttons for evaluation. We will probably convert this
  to use a "quasi-real editor", but for now, we'll keep it simple.

  First step, is to have a template that we'll use to substitute each
  =<pre>= block.

#+BEGIN_SRC coffee :noweb tangle
  template = '''
  <<htmltemplate>>
  '''
  
  $ ->
    $("pre.src").each (i, pre) ->
      $pre = $(pre)
      code = $pre.text()
      lines = code.replace(/[^\n\r]/g, '').length + 1
    
      t = $(template).attr("id", "code-"+i).
        find(".button-run").button().click(simulation).end().
        find(".button-skip").button().click(evalRun).end().
        find(".button-big").button().click(enlargeArea).end().
        find("textarea").attr("rows", lines).val(code).end().
  
        find("a.tab-results").attr("href", "#tab-results-"+ i).end().
        find("#tab-results").attr("id", "tab-results-"+ i).end().
        find("a.tab-logs").attr("href", "#tab-logs-"+ i).end().
        find("#tab-logs").attr("id", "tab-logs-"+ i).end().
        find("a.tab-debug").attr("href", "#tab-debug-"+ i).end().
        find("#tab-debug").attr("id", "tab-debug-"+ i).end().
        find("a.tab-map").attr("href", "#tab-map-"+ i).end().
        find("#tab-map").attr("id", "tab-map-"+ i).end().
        find("#rover-map").attr("id", "rover-map-"+ i).end()
      $pre.replaceWith t
  
    $(".tabs").tabs()
#+END_SRC

  This is the /template/ that goes into the =template= variable.

#+NAME: htmltemplate
#+BEGIN_SRC html :tangle no
  <table class="code" width="100%">
    <tr>
      <td class="code-area" rowspan="2">
        <textarea rows="5"></textarea>
      </td>
      <td class="buttons">
        <button type="button" class="button-run">Go</button> <br/>
        <button type="button" class="button-skip">Skip</button> <br/>
      </td>
      <td class="results" rowspan="2">
        <div class="tabs">
          <ul>
            <li><a class="tab-results">Result</a></li>
            <li><a class="tab-logs">Logs</a></li>
            <li><a class="tab-debug">Engine</a></li>
            <li><a class="tab-map">Map</a></li>
          </ul>
          <div id="tab-results" class="results tabbed-section">
            Press the <b>Go</b> button to send your commands to the
            remote rover. This area will contain the results of the mission.
          </div>
          <div id="tab-logs" class="logs tabbed-section">
            Command messages from <code>console.log()</code> will appear
            in this panel.
          </div>
          <div id="tab-debug" class="debug tabbed-section">
            Log messages from the remote rover's activity will be
            shown in this panel.
          </div>
          <div id="tab-map" class="map tabbed-section">
            <canvas id="rover-map" height="300" width="400"/>
          </div>
        </div>
      </td>
    </tr>
    <tr>
      <td class="buttons2">
        <button type="button" class="button-big">&darr;</button>
      </td>
    </tr>
  </table>
#+END_SRC

* Styling

  The following is the CSS styles associated with the "console" and
  text editing... not the game styling.

#+BEGIN_SRC css :tangle ../site/styles/console.css
  table.code {
    width: 100%;
  }
  table.code td.code-area {
    width: 45%;
  }
  table.code td.buttons {
    width: 100px;
  }
  table.code td.results {
    /* width: 45%; */
  }
  
  td.results ul {
    margin-top: 0;
    padding-left: 1em;
  }

  .buttons, .buttons2 {
    text-align: right;
    padding: 0px 12px;
  }
  .buttons2 {
    vertical-align: bottom;
  }
  
  .buttons button, .buttons2 button {
    font-size: 12px;
    width: 62px;
    clear: both;
  }
  
  .code-area {
  }
  
  textarea {
    width: 100%;
    font-size: 17px;
    font-family: courier, monospace;
    min-height: 60px;
    background-color: #444;
    color: aqua;
    border: 1px solid white;
    padding: 12px;
  }
  
  .tabs {
    font-size: 16px;
  }
  .tabs ul {
    font-size: 14px;
  }
  a.ui-tabs-anchor {
    font-size: 14px;
  }
  .ui-button-text {
    font-size: 16px;
  }
  
  .tabs th {
    text-align: right;
    padding-right: 8px;
  }
  .tabs code {
    color: orange;
  }
  
  .tabbed-section {
  }
  #tab-results {
  }
  #tab-logs {
  }
  #tabs-debug {
  }
  #tabs-map {
  }
#+END_SRC

* Technical Section
  
  This file originally came from an [[http://orgmode.org][org-mode]] file.
  Create the script by tangling it with: =C-c C-v t=
  
#+PROPERTY: tangle ../site/scripts/console.coffee
#+PROPERTY: comments org
#+PROPERTY: shebang #!/usr/bin/env coffee
#+DESCRIPTION: Creates the CoffeeScript support code for RV Consoles
