#+TITLE:  VEEPS Library, v1
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@workday.com
#+DATE:   [2013-08-05 Mon][2013-08-05 Mon]
#+TAGS:   veeps

This is the first rover library for the student to use. By claiming it
is version 1, we can upgrade it later when we need... for instance, by
letting them get the RVs to talk to each other or something.

* Worlds of Data

  All worlds will have some /data/ associated with the land, hazards
  and other events.

#+BEGIN_SRC coffee
  worlds =
          lab:
                  name: "White Lab",
                  slope: (x, y) -> 0
                  terrain: (x, y) -> 1
          lab_sand:
                  name: "Sandy Lab",
                  slope: (x, y) -> 0
                  terrain: (x, y) -> if y > 2 then 0.75 else 1
          p0_hole:
                  name: "Planet 0BB14BD6BC58",
                  terrain: (x, y) -> 1
                  slope: (x, y) -> 0    # Return something more realistic.
#+END_SRC

* Robotic Vehicles

  Each RV should have a list of "features", and is given a results
  status after the mission.

#+BEGIN_SRC coffee
  robots =
          "875E":
                  name: "Itsy"
                  energy: 30
                  turtle: 20
          "75A2":
                  name: "Feeler"
                  energy: 300
                  turtle: 20
#+END_SRC

* Missions

** Mission Types

  Each mission must be accomplished, and we want to be able to tell
  the player how they did. 

*** Return to Base

    The simplest type of mission requires returning back to the base
    station.

#+BEGIN_SRC coffee
  missionReturnToBase = (rv) -> 
          assert( "Return to base", isAtBase(rv.x, rv.y),
                  "Lost contact at: " + sround(rv.x) + ", " + sround(rv.y))
#+END_SRC

*** Collect Specimens

    This mission type is called with details of where things should
    be "grabbed", and it returns a function that can be called.

#+BEGIN_SRC coffee
  missionCollection = (type, locations) ->
      (rv) ->
          console.log "Collected", type, rv.collection[type]
          stuff = rv.collection[type]   # The stuff that was collected
  
          if stuff
                  successful = true
                  # We do a 'real loop' so that I can assert each aspect
                  # of the mission to collect something
                  for spot in locations
                          partly = _.any( isClose(s, spot) for s in stuff )
                          assert "Collect #{type} at #{spot[0]}, #{spot[1]}", partly
                          successful = successful and partly
                  successful
          else
                  false
#+END_SRC

** Rover Missions

  Each "mission" associates a rover and a world and a call to a
  mission type.

#+BEGIN_SRC coffee
  missions = [
          {  # 0- 01-Meet M
                  robot: robots["875E"]
                  world: worlds["lab"]
                  success: missionReturnToBase
          },
          {  # 1- 02-Another-Lab
                  robot: robots["875E"]
                  world: worlds["lab"]
                  success: missionReturnToBase
          },
          {  # 2- 03-Lab-Programming
                  robot: robots["875E"]
                  world: worlds["lab"]
                  success: missionReturnToBase
          },
          {  # 3- 04x-Trigonometry
                  robot: robots["875E"]
                  world: worlds["lab"]
                  success: missionCollection('flag', [ [4, 3], [-2, 5], [1, -3] ])
          },
          {  # 4- 04-Final-Lab
                  robot: robots["875E"]
                  world: worlds["lab_sand"]
                  success: missionReturnToBase
          },
          {  # 5- 05-First-Mission
                  robot: robots["75A2"]
                  world: worlds["p0-hole"]
                  success: missionReturnToBase
          }
  ]
#+END_SRC

* Current Mission

  This variable is a module-local variable to hold the "current"
  mission. The =connect()= function will reset this, and other
  functions will add information to the object.

#+BEGIN_SRC coffee
  rv = null
#+END_SRC

* Turtle Wax

  We'll use Dave Balmer's [[https://github.com/davebalmer/turtlewax][TurtleWax]] project to implement a "map" of
  where the rover goes. We'll initialize the =turtle= variable during
  the =connect= method.

#+BEGIN_SRC coffee
  turtle = null
#+END_SRC

* Start with a Connect

  The connect command is essentially a no-op, but we can use it as an
  initialization and setup command.

#+BEGIN_SRC coffee
  connect = (serial) ->
          [number, rover, extra, id] = serial.split("-")
          if not id then id = 0
  
          mission = missions[number]
          # console.log(id, number, rover, extra)
          if mission
                  rv =
                          robot: mission.robot,
                          world: mission.world,
                          mission: mission.success,
                          x: 0, y: 0, z: 0,
                          direction: 0,
                          distance: 0, maxdist: 0,
                          traveled: 0,
                          energy_used: 0,
                          energy: mission.robot.energy,
                          collection: {},
                          log: [  'Beginning Mission: ' + ( parseInt(number) + 1) ],
                          debug: []
                          results: []
                  turtle = new Pen("rover-map-" + id)
  
                  # ctx.clearRect(0,0,canvas.width,canvas.height)
                  home =
                          x: 200
                          y: 150
                          size:10
                          
                  # Draw a "home" base as a little square
                  turtle.penstyle("#0ff").pensize(2).
                          jump(home.x + home.size/2, home.y + home.size/2).
                          left(home.size).up(home.size).
                          right(home.size).down(home.size).
                          close().text("Base").draw().text("Base")
  
                  # Set up the "path" for the rover.
                  turtle.jump(home.x, home.y).pensize(4).penstyle("#0f0").pendown()
  
                  log "Rover: #{rv.robot.name} (Energy: #{rv.robot.energy})"
          else
                  throw "Failed to connect to RV: " + id
#+END_SRC

* Dock

  This verifies that the RV is back at the dock. This can be used to
  return a mission summary.

#+BEGIN_SRC coffee
  dock = ->
    if rv
      turtle.draw()
      if isAtBase(rv.x, rv.y)
        log("Re-Docked.")
      else
        log("RV is not at base station.")
  
      completion = checkAssignment(rv)

      result_status =
          Name: rv.robot.name
          Initial_Energy: rv.robot.energy
          Energy_Used: rv.energy_used
          Energy_Left: rv.energy
          Current_Direction: sround rv.direction
          Maximum_Distance:  sround rv.maxdist
          Distance_Traveled: sround rv.traveled
          Mission_Results:   rv.results

      [ result_status, rv.log, rv.debug, completion ]
#+END_SRC

* Forward

** Pulse Move

   Given a direction (in radians, mind you) and the energy to be
   consumed for this "single value push" (1 for forward motion and
   1.5 for retrograde).

#+BEGIN_SRC coffee
  move_pulse = (direction, energy_needed) ->
          x = rv.x      # Save the current location
          y = rv.y
          rv.energy_used += energy_needed;
          rv.energy -= energy_needed;
  
          if rv.energy < 0
               log "Energy drained. Stopping at #{x}, #{y}"
               throw "Energy drained"
  
          # The 'distance' is the amount the rover can travel for a
          # particular spot in this world...
          console.log("Move RV", rv)

          distance = rv.world.terrain(x,y)
          console.log "Distance", distance, "Direction", direction
          
          # Turtle scaling is a factor stored in the 'robot'
          turtle.go(distance * rv.robot.turtle)   # Update the map
  
          rv.traveled += distance      # Store the total amount traveled.
          rv.x += Math.cos(direction) * distance
          rv.y += Math.sin(direction) * distance
  
          debug "Traveled:", distance, "m - Energy:", rv.energy,
               "(", rv.x.toFixed(2), ",", rv.y.toFixed(2), ")"
#+END_SRC

** Move

  Takes a number of "pulses" for the engine. 1 pulse is 1 revolution
  of the wheel, and this process ends up moving the rover 1 meter on
  cement (the default terrain). This is because the wheel diameter is
  about .318310155 meters.

  Since pi * .318310155 ~= 1, This will work, however, this can be
  affected by the wheel traction of the given terrain.

#+BEGIN_SRC coffee
  move = (pulses, direction, energy_needed) ->
          for m in [1..pulses]
                  move_pulse(direction, energy_needed)
  
          # Calculate the rv distance from the base station
          rv.distance = Math.sqrt( rv.x * rv.x + rv.y * rv.y)
          log "Current distance:", rv.distance.toFixed(2), "m"
                      # "(", rv.x.toFixed(2), ", ", rv.y.toFixed(2), ")"
          # Store this distance as "max" if it is larger than the rv
          rv.maxdist = Math.max(rv.distance, rv.maxdist)
#+END_SRC

  The =forward= function just needs to call the =move= function with
  a direction converted from degrees to radians.

#+BEGIN_SRC coffee
  forward = (pulses) ->
          throw "Can't move without connection." if not rv
          move(pulses, rv.direction * (Math.PI/180), 1)
#+END_SRC
* Backward

  This will just call the =move= but with an opposite radian direction.

#+BEGIN_SRC coffee
  backward = (pulses) ->
          throw "Can't move without connection." if not rv
          move(pulses, (180 - rv.direction) * (Math.PI/180), 1.5)
#+END_SRC

* Left and Right

  Turning just adjusts the =direction= property.

#+BEGIN_SRC coffee
  left = (degrees) ->
          turtle.turn(- degrees)
          rv.direction += degrees
          rv.direction = normalize(rv.direction)
          debug "Turned left", degrees, "° - Current:", rv.direction
  
  right = (degrees) ->
          turtle.turn(degrees)
          rv.direction -= degrees
          rv.direction = normalize(rv.direction)
          debug "Turned right", degrees, "° - Current:", rv.direction
  
  normalize = (current) ->
      while current >= 360
          current -= 360
      while current <= -360
          current += 360
      current        
#+END_SRC

* Grab Something

#+BEGIN_SRC coffee
  grab = (t) ->
          if ! rv.collection[t]
                  rv.collection[t] = []
          rv.collection[t].push( [rv.x, rv.y] )
#+END_SRC

* Check Assignment

  Each mission must be /accomplished/, and for that, we need to
  compare the final results with those goals.

#+BEGIN_SRC coffee
  assert = (msg, cond, details...) ->
          if cond
                  result msg, "- Accomplished"
          else
                  result msg, "- Failed<br/>", details
          cond
  
  # String::endsWith = (str) -> this.slice(-str.length) == str
  
  isAtBase = (x, y) -> x < 1 and y < 1 and x > -1 and y > -1
  
  isClose = (spot1, spot2) ->
          console.log("isClose", spot1, spot2)
          sround(spot1[0]) is sround(spot2[0]) and sround(spot1[1]) is sround(spot2[1])
  
  checkAssignment = (rv) ->
    console.log "Checking", rv.mission, rv.mission(rv)
#+END_SRC

* Log Messages

  We store our log messages in two arrays. Each function can take
  multiple entries that will be joined together separated by spaces.

#+BEGIN_SRC coffee
  log = (parts...) -> rv.log.push parts.join(" ")
  debug = (parts...) -> rv.debug.push parts.join(" ")
#+END_SRC

** Mission Messages

   The end results of missions are stored in a different array and
   called with the =result= function.

#+BEGIN_SRC coffee
  result = (parts...) -> rv.results.push parts.join(" ")
#+END_SRC

* Utility Functions

  General functions that we need.

** String Rounding

   Assuming that we want our values to be "close enough" and readable,
   the following fixes a decimal number to 2 decimal places, and if
   the value can be displayed as an integer, it will:

#+BEGIN_SRC coffee
  sround = (x) ->
          s = x.toFixed(2)
          if s.slice(-3) is ".00"
                  s.slice(0, -3)
          else if s.slice(-1) is "0"
                  s.slice(0, -1)
          else
                  s
#+END_SRC

* Math Function Helpers

  Would be nice if we could wrap the trigonometry functions in
  /non-radians/:

** Square Root

   Would spelling things out be nicer?

#+BEGIN_SRC coffee
square_root = (r) ->
    Math.sqrt(r)

square = (x) ->
    x * x
#+END_SRC

** Sine, Cosine and Tangent

   The only /trick/ here is to convert the degrees (given as an input)
   to radians as expected by the JavaScript library.

#+BEGIN_SRC coffee
sin = (degrees) ->
  Math.sin(degrees * Math.PI/180)
#+END_SRC

#+BEGIN_SRC coffee
cos = (degrees) ->
  Math.cos(degrees * Math.PI/180)
#+END_SRC

#+BEGIN_SRC coffee
tan = (degrees) ->
  Math.tan(degrees * Math.PI/180)
#+END_SRC

** Arc Tangent

   The "arc" versions of functions just require conversion on the way
   out.

#+BEGIN_SRC coffee
asin = (value) ->
  Math.asin(value) * (180/Math.PI)
#+END_SRC

#+BEGIN_SRC coffee
acos = (value) ->
  Math.acos(value) * (180/Math.PI)
#+END_SRC

#+BEGIN_SRC coffee
atan = (value) ->
  Math.atan(value) * (180/Math.PI)
#+END_SRC

* Technical Section
  
  In order to get this library to work in both Node.js (during
  development) and on the browser, we need to /export/ the accessible
  functions to something else:

#+BEGIN_SRC coffee
  if window
          window.connect  = connect
          window.forward  = forward
          window.backward = backward
          window.left     = left
          window.right    = right
          window.grab     = grab
          window.dock     = dock
  
          window.flag     = "flag"
          
          window.square_root = square_root
          window.square   = square
          window.sin      = sin
          window.cos      = cos
          window.tan      = tan
          window.asin     = asin
          window.acos     = acos
          window.atan     = atan
  
  else
          exports.connect  = connect
          exports.forward  = forward
          exports.backward = backward
          exports.left     = left
          exports.right    = right
          exports.grab     = grab
          exports.dock     = dock
  
          exports.flag     = "flag"
  
          exports.square_root = square_root
          exports.square   = square
          exports.sin      = sin
          exports.cos      = cos
          exports.tan      = tan
          exports.asin     = asin
          exports.acos     = acos
          exports.atan     = atan
#+END_SRC

  This file originally came from an [[http://orgmode.org][org-mode]] file.
  Create the script by tangling it with: =C-c C-v t=
  
#+PROPERTY: tangle ../site/scripts/veeps-rv-1.coffee
#+PROPERTY: comments org
#+PROPERTY: shebang #!/usr/bin/env coffee
#+DESCRIPTION: 
